// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DeluxeOwl/kala-go/ent/typeconfig"
)

// TypeConfig is the model entity for the TypeConfig schema.
type TypeConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TypeConfigQuery when eager-loading is set.
	Edges TypeConfigEdges `json:"edges"`
}

// TypeConfigEdges holds the relations/edges for other nodes in the graph.
type TypeConfigEdges struct {
	// Relations holds the value of the relations edge.
	Relations []*Relation `json:"relations,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// RelTypeconfigs holds the value of the rel_typeconfigs edge.
	RelTypeconfigs []*Relation `json:"rel_typeconfigs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RelationsOrErr returns the Relations value or an error if the edge
// was not loaded in eager-loading.
func (e TypeConfigEdges) RelationsOrErr() ([]*Relation, error) {
	if e.loadedTypes[0] {
		return e.Relations, nil
	}
	return nil, &NotLoadedError{edge: "relations"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e TypeConfigEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[1] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e TypeConfigEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[2] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// RelTypeconfigsOrErr returns the RelTypeconfigs value or an error if the edge
// was not loaded in eager-loading.
func (e TypeConfigEdges) RelTypeconfigsOrErr() ([]*Relation, error) {
	if e.loadedTypes[3] {
		return e.RelTypeconfigs, nil
	}
	return nil, &NotLoadedError{edge: "rel_typeconfigs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TypeConfig) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case typeconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case typeconfig.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TypeConfig", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TypeConfig fields.
func (tc *TypeConfig) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case typeconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tc.ID = int(value.Int64)
		case typeconfig.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tc.Name = value.String
			}
		}
	}
	return nil
}

// QueryRelations queries the "relations" edge of the TypeConfig entity.
func (tc *TypeConfig) QueryRelations() *RelationQuery {
	return (&TypeConfigClient{config: tc.config}).QueryRelations(tc)
}

// QueryPermissions queries the "permissions" edge of the TypeConfig entity.
func (tc *TypeConfig) QueryPermissions() *PermissionQuery {
	return (&TypeConfigClient{config: tc.config}).QueryPermissions(tc)
}

// QuerySubjects queries the "subjects" edge of the TypeConfig entity.
func (tc *TypeConfig) QuerySubjects() *SubjectQuery {
	return (&TypeConfigClient{config: tc.config}).QuerySubjects(tc)
}

// QueryRelTypeconfigs queries the "rel_typeconfigs" edge of the TypeConfig entity.
func (tc *TypeConfig) QueryRelTypeconfigs() *RelationQuery {
	return (&TypeConfigClient{config: tc.config}).QueryRelTypeconfigs(tc)
}

// Update returns a builder for updating this TypeConfig.
// Note that you need to call TypeConfig.Unwrap() before calling this method if this TypeConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TypeConfig) Update() *TypeConfigUpdateOne {
	return (&TypeConfigClient{config: tc.config}).UpdateOne(tc)
}

// Unwrap unwraps the TypeConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TypeConfig) Unwrap() *TypeConfig {
	tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("ent: TypeConfig is not a transactional entity")
	}
	tc.config.driver = tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TypeConfig) String() string {
	var builder strings.Builder
	builder.WriteString("TypeConfig(")
	builder.WriteString(fmt.Sprintf("id=%v", tc.ID))
	builder.WriteString(", name=")
	builder.WriteString(tc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TypeConfigs is a parsable slice of TypeConfig.
type TypeConfigs []*TypeConfig

func (tc TypeConfigs) config(cfg config) {
	for _i := range tc {
		tc[_i].config = cfg
	}
}
