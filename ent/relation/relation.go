// Code generated by entc, DO NOT EDIT.

package relation

const (
	// Label holds the string label denoting the relation type in the database.
	Label = "relation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeTypeconfig holds the string denoting the typeconfig edge name in mutations.
	EdgeTypeconfig = "typeconfig"
	// Table holds the table name of the relation in the database.
	Table = "relations"
	// TypeconfigTable is the table that holds the typeconfig relation/edge.
	TypeconfigTable = "relations"
	// TypeconfigInverseTable is the table name for the TypeConfig entity.
	// It exists in this package in order to avoid circular dependency with the "typeconfig" package.
	TypeconfigInverseTable = "type_configs"
	// TypeconfigColumn is the table column denoting the typeconfig relation/edge.
	TypeconfigColumn = "type_config_relations"
)

// Columns holds all SQL columns for relation fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "relations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"type_config_relations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
