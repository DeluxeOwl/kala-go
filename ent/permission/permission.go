// Code generated by entc, DO NOT EDIT.

package permission

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeRelations holds the string denoting the relations edge name in mutations.
	EdgeRelations = "relations"
	// EdgeTypeconfig holds the string denoting the typeconfig edge name in mutations.
	EdgeTypeconfig = "typeconfig"
	// Table holds the table name of the permission in the database.
	Table = "permissions"
	// RelationsTable is the table that holds the relations relation/edge. The primary key declared below.
	RelationsTable = "permission_relations"
	// RelationsInverseTable is the table name for the Relation entity.
	// It exists in this package in order to avoid circular dependency with the "relation" package.
	RelationsInverseTable = "relations"
	// TypeconfigTable is the table that holds the typeconfig relation/edge.
	TypeconfigTable = "permissions"
	// TypeconfigInverseTable is the table name for the TypeConfig entity.
	// It exists in this package in order to avoid circular dependency with the "typeconfig" package.
	TypeconfigInverseTable = "type_configs"
	// TypeconfigColumn is the table column denoting the typeconfig relation/edge.
	TypeconfigColumn = "type_config_permissions"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "permissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"type_config_permissions",
}

var (
	// RelationsPrimaryKey and RelationsColumn2 are the table columns denoting the
	// primary key for the relations relation (M2M).
	RelationsPrimaryKey = []string{"permission_id", "relation_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
