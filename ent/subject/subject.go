// Code generated by entc, DO NOT EDIT.

package subject

const (
	// Label holds the string label denoting the subject type in the database.
	Label = "subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeType holds the string denoting the type edge name in mutations.
	EdgeType = "type"
	// EdgeRelations holds the string denoting the relations edge name in mutations.
	EdgeRelations = "relations"
	// EdgeAsDirectOwnerTuples holds the string denoting the as_direct_owner_tuples edge name in mutations.
	EdgeAsDirectOwnerTuples = "as_direct_owner_tuples"
	// EdgeAsResourceTuples holds the string denoting the as_resource_tuples edge name in mutations.
	EdgeAsResourceTuples = "as_resource_tuples"
	// Table holds the table name of the subject in the database.
	Table = "subjects"
	// TypeTable is the table that holds the type relation/edge.
	TypeTable = "subjects"
	// TypeInverseTable is the table name for the TypeConfig entity.
	// It exists in this package in order to avoid circular dependency with the "typeconfig" package.
	TypeInverseTable = "type_configs"
	// TypeColumn is the table column denoting the type relation/edge.
	TypeColumn = "type_config_subjects"
	// RelationsTable is the table that holds the relations relation/edge. The primary key declared below.
	RelationsTable = "relation_subjects"
	// RelationsInverseTable is the table name for the Relation entity.
	// It exists in this package in order to avoid circular dependency with the "relation" package.
	RelationsInverseTable = "relations"
	// AsDirectOwnerTuplesTable is the table that holds the as_direct_owner_tuples relation/edge.
	AsDirectOwnerTuplesTable = "tuples"
	// AsDirectOwnerTuplesInverseTable is the table name for the Tuple entity.
	// It exists in this package in order to avoid circular dependency with the "tuple" package.
	AsDirectOwnerTuplesInverseTable = "tuples"
	// AsDirectOwnerTuplesColumn is the table column denoting the as_direct_owner_tuples relation/edge.
	AsDirectOwnerTuplesColumn = "subject_id"
	// AsResourceTuplesTable is the table that holds the as_resource_tuples relation/edge.
	AsResourceTuplesTable = "tuples"
	// AsResourceTuplesInverseTable is the table name for the Tuple entity.
	// It exists in this package in order to avoid circular dependency with the "tuple" package.
	AsResourceTuplesInverseTable = "tuples"
	// AsResourceTuplesColumn is the table column denoting the as_resource_tuples relation/edge.
	AsResourceTuplesColumn = "resource_id"
)

// Columns holds all SQL columns for subject fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subjects"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"type_config_subjects",
}

var (
	// RelationsPrimaryKey and RelationsColumn2 are the table columns denoting the
	// primary key for the relations relation (M2M).
	RelationsPrimaryKey = []string{"relation_id", "subject_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
