// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DeluxeOwl/kala-go/ent/relation"
	"github.com/DeluxeOwl/kala-go/ent/typeconfig"
)

// Relation is the model entity for the Relation schema.
type Relation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RelationQuery when eager-loading is set.
	Edges                 RelationEdges `json:"edges"`
	type_config_relations *int
}

// RelationEdges holds the relations/edges for other nodes in the graph.
type RelationEdges struct {
	// Subjects holds the value of the subjects edge.
	Subjects []*Subject `json:"subjects,omitempty"`
	// RelTypeconfigs holds the value of the rel_typeconfigs edge.
	RelTypeconfigs []*TypeConfig `json:"rel_typeconfigs,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Typeconfig holds the value of the typeconfig edge.
	Typeconfig *TypeConfig `json:"typeconfig,omitempty"`
	// Tuples holds the value of the tuples edge.
	Tuples []*Tuple `json:"tuples,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SubjectsOrErr returns the Subjects value or an error if the edge
// was not loaded in eager-loading.
func (e RelationEdges) SubjectsOrErr() ([]*Subject, error) {
	if e.loadedTypes[0] {
		return e.Subjects, nil
	}
	return nil, &NotLoadedError{edge: "subjects"}
}

// RelTypeconfigsOrErr returns the RelTypeconfigs value or an error if the edge
// was not loaded in eager-loading.
func (e RelationEdges) RelTypeconfigsOrErr() ([]*TypeConfig, error) {
	if e.loadedTypes[1] {
		return e.RelTypeconfigs, nil
	}
	return nil, &NotLoadedError{edge: "rel_typeconfigs"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e RelationEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[2] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// TypeconfigOrErr returns the Typeconfig value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RelationEdges) TypeconfigOrErr() (*TypeConfig, error) {
	if e.loadedTypes[3] {
		if e.Typeconfig == nil {
			// The edge typeconfig was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: typeconfig.Label}
		}
		return e.Typeconfig, nil
	}
	return nil, &NotLoadedError{edge: "typeconfig"}
}

// TuplesOrErr returns the Tuples value or an error if the edge
// was not loaded in eager-loading.
func (e RelationEdges) TuplesOrErr() ([]*Tuple, error) {
	if e.loadedTypes[4] {
		return e.Tuples, nil
	}
	return nil, &NotLoadedError{edge: "tuples"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Relation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case relation.FieldID:
			values[i] = new(sql.NullInt64)
		case relation.FieldName, relation.FieldValue:
			values[i] = new(sql.NullString)
		case relation.ForeignKeys[0]: // type_config_relations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Relation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Relation fields.
func (r *Relation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case relation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case relation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case relation.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				r.Value = value.String
			}
		case relation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field type_config_relations", value)
			} else if value.Valid {
				r.type_config_relations = new(int)
				*r.type_config_relations = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySubjects queries the "subjects" edge of the Relation entity.
func (r *Relation) QuerySubjects() *SubjectQuery {
	return (&RelationClient{config: r.config}).QuerySubjects(r)
}

// QueryRelTypeconfigs queries the "rel_typeconfigs" edge of the Relation entity.
func (r *Relation) QueryRelTypeconfigs() *TypeConfigQuery {
	return (&RelationClient{config: r.config}).QueryRelTypeconfigs(r)
}

// QueryPermissions queries the "permissions" edge of the Relation entity.
func (r *Relation) QueryPermissions() *PermissionQuery {
	return (&RelationClient{config: r.config}).QueryPermissions(r)
}

// QueryTypeconfig queries the "typeconfig" edge of the Relation entity.
func (r *Relation) QueryTypeconfig() *TypeConfigQuery {
	return (&RelationClient{config: r.config}).QueryTypeconfig(r)
}

// QueryTuples queries the "tuples" edge of the Relation entity.
func (r *Relation) QueryTuples() *TupleQuery {
	return (&RelationClient{config: r.config}).QueryTuples(r)
}

// Update returns a builder for updating this Relation.
// Note that you need to call Relation.Unwrap() before calling this method if this Relation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Relation) Update() *RelationUpdateOne {
	return (&RelationClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Relation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Relation) Unwrap() *Relation {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Relation is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Relation) String() string {
	var builder strings.Builder
	builder.WriteString("Relation(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", value=")
	builder.WriteString(r.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Relations is a parsable slice of Relation.
type Relations []*Relation

func (r Relations) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
