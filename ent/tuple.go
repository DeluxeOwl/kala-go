// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/DeluxeOwl/kala-go/ent/relation"
	"github.com/DeluxeOwl/kala-go/ent/subject"
	"github.com/DeluxeOwl/kala-go/ent/tuple"
)

// Tuple is the model entity for the Tuple schema.
type Tuple struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SubjectID holds the value of the "subject_id" field.
	SubjectID int `json:"subject_id,omitempty"`
	// RelationID holds the value of the "relation_id" field.
	RelationID int `json:"relation_id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID int `json:"resource_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TupleQuery when eager-loading is set.
	Edges TupleEdges `json:"edges"`
}

// TupleEdges holds the relations/edges for other nodes in the graph.
type TupleEdges struct {
	// Subject holds the value of the subject edge.
	Subject *Subject `json:"subject,omitempty"`
	// Relation holds the value of the relation edge.
	Relation *Relation `json:"relation,omitempty"`
	// Resource holds the value of the resource edge.
	Resource *Subject `json:"resource,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SubjectOrErr returns the Subject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TupleEdges) SubjectOrErr() (*Subject, error) {
	if e.loadedTypes[0] {
		if e.Subject == nil {
			// The edge subject was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.Subject, nil
	}
	return nil, &NotLoadedError{edge: "subject"}
}

// RelationOrErr returns the Relation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TupleEdges) RelationOrErr() (*Relation, error) {
	if e.loadedTypes[1] {
		if e.Relation == nil {
			// The edge relation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: relation.Label}
		}
		return e.Relation, nil
	}
	return nil, &NotLoadedError{edge: "relation"}
}

// ResourceOrErr returns the Resource value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TupleEdges) ResourceOrErr() (*Subject, error) {
	if e.loadedTypes[2] {
		if e.Resource == nil {
			// The edge resource was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.Resource, nil
	}
	return nil, &NotLoadedError{edge: "resource"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tuple) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tuple.FieldID, tuple.FieldSubjectID, tuple.FieldRelationID, tuple.FieldResourceID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tuple", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tuple fields.
func (t *Tuple) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tuple.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tuple.FieldSubjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_id", values[i])
			} else if value.Valid {
				t.SubjectID = int(value.Int64)
			}
		case tuple.FieldRelationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field relation_id", values[i])
			} else if value.Valid {
				t.RelationID = int(value.Int64)
			}
		case tuple.FieldResourceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				t.ResourceID = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySubject queries the "subject" edge of the Tuple entity.
func (t *Tuple) QuerySubject() *SubjectQuery {
	return (&TupleClient{config: t.config}).QuerySubject(t)
}

// QueryRelation queries the "relation" edge of the Tuple entity.
func (t *Tuple) QueryRelation() *RelationQuery {
	return (&TupleClient{config: t.config}).QueryRelation(t)
}

// QueryResource queries the "resource" edge of the Tuple entity.
func (t *Tuple) QueryResource() *SubjectQuery {
	return (&TupleClient{config: t.config}).QueryResource(t)
}

// Update returns a builder for updating this Tuple.
// Note that you need to call Tuple.Unwrap() before calling this method if this Tuple
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tuple) Update() *TupleUpdateOne {
	return (&TupleClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tuple entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tuple) Unwrap() *Tuple {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tuple is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tuple) String() string {
	var builder strings.Builder
	builder.WriteString("Tuple(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", subject_id=")
	builder.WriteString(fmt.Sprintf("%v", t.SubjectID))
	builder.WriteString(", relation_id=")
	builder.WriteString(fmt.Sprintf("%v", t.RelationID))
	builder.WriteString(", resource_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ResourceID))
	builder.WriteByte(')')
	return builder.String()
}

// Tuples is a parsable slice of Tuple.
type Tuples []*Tuple

func (t Tuples) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
