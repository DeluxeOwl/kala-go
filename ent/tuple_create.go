// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DeluxeOwl/kala-go/ent/relation"
	"github.com/DeluxeOwl/kala-go/ent/subject"
	"github.com/DeluxeOwl/kala-go/ent/tuple"
)

// TupleCreate is the builder for creating a Tuple entity.
type TupleCreate struct {
	config
	mutation *TupleMutation
	hooks    []Hook
}

// SetSubjectRel sets the "subject_rel" field.
func (tc *TupleCreate) SetSubjectRel(s string) *TupleCreate {
	tc.mutation.SetSubjectRel(s)
	return tc
}

// SetNillableSubjectRel sets the "subject_rel" field if the given value is not nil.
func (tc *TupleCreate) SetNillableSubjectRel(s *string) *TupleCreate {
	if s != nil {
		tc.SetSubjectRel(*s)
	}
	return tc
}

// SetSubjectID sets the "subject_id" field.
func (tc *TupleCreate) SetSubjectID(i int) *TupleCreate {
	tc.mutation.SetSubjectID(i)
	return tc
}

// SetRelationID sets the "relation_id" field.
func (tc *TupleCreate) SetRelationID(i int) *TupleCreate {
	tc.mutation.SetRelationID(i)
	return tc
}

// SetResourceID sets the "resource_id" field.
func (tc *TupleCreate) SetResourceID(i int) *TupleCreate {
	tc.mutation.SetResourceID(i)
	return tc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (tc *TupleCreate) SetSubject(s *Subject) *TupleCreate {
	return tc.SetSubjectID(s.ID)
}

// SetRelation sets the "relation" edge to the Relation entity.
func (tc *TupleCreate) SetRelation(r *Relation) *TupleCreate {
	return tc.SetRelationID(r.ID)
}

// SetResource sets the "resource" edge to the Subject entity.
func (tc *TupleCreate) SetResource(s *Subject) *TupleCreate {
	return tc.SetResourceID(s.ID)
}

// Mutation returns the TupleMutation object of the builder.
func (tc *TupleCreate) Mutation() *TupleMutation {
	return tc.mutation
}

// Save creates the Tuple in the database.
func (tc *TupleCreate) Save(ctx context.Context) (*Tuple, error) {
	var (
		err  error
		node *Tuple
	)
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TupleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TupleCreate) SaveX(ctx context.Context) *Tuple {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TupleCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TupleCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TupleCreate) check() error {
	if _, ok := tc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "Tuple.subject_id"`)}
	}
	if _, ok := tc.mutation.RelationID(); !ok {
		return &ValidationError{Name: "relation_id", err: errors.New(`ent: missing required field "Tuple.relation_id"`)}
	}
	if _, ok := tc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "Tuple.resource_id"`)}
	}
	if _, ok := tc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required edge "Tuple.subject"`)}
	}
	if _, ok := tc.mutation.RelationID(); !ok {
		return &ValidationError{Name: "relation", err: errors.New(`ent: missing required edge "Tuple.relation"`)}
	}
	if _, ok := tc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required edge "Tuple.resource"`)}
	}
	return nil
}

func (tc *TupleCreate) sqlSave(ctx context.Context) (*Tuple, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (tc *TupleCreate) createSpec() (*Tuple, *sqlgraph.CreateSpec) {
	var (
		_node = &Tuple{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: tuple.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tuple.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.SubjectRel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tuple.FieldSubjectRel,
		})
		_node.SubjectRel = value
	}
	if nodes := tc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuple.SubjectTable,
			Columns: []string{tuple.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.RelationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuple.RelationTable,
			Columns: []string{tuple.RelationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RelationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ResourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   tuple.ResourceTable,
			Columns: []string{tuple.ResourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ResourceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TupleCreateBulk is the builder for creating many Tuple entities in bulk.
type TupleCreateBulk struct {
	config
	builders []*TupleCreate
}

// Save creates the Tuple entities in the database.
func (tcb *TupleCreateBulk) Save(ctx context.Context) ([]*Tuple, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tuple, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TupleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TupleCreateBulk) SaveX(ctx context.Context) []*Tuple {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TupleCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TupleCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
