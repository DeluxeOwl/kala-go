// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DeluxeOwl/kala-go/ent/predicate"
	"github.com/DeluxeOwl/kala-go/ent/relation"
	"github.com/DeluxeOwl/kala-go/ent/subject"
	"github.com/DeluxeOwl/kala-go/ent/tuple"
	"github.com/DeluxeOwl/kala-go/ent/typeconfig"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetTypeID sets the "type" edge to the TypeConfig entity by ID.
func (su *SubjectUpdate) SetTypeID(id int) *SubjectUpdate {
	su.mutation.SetTypeID(id)
	return su
}

// SetNillableTypeID sets the "type" edge to the TypeConfig entity by ID if the given value is not nil.
func (su *SubjectUpdate) SetNillableTypeID(id *int) *SubjectUpdate {
	if id != nil {
		su = su.SetTypeID(*id)
	}
	return su
}

// SetType sets the "type" edge to the TypeConfig entity.
func (su *SubjectUpdate) SetType(t *TypeConfig) *SubjectUpdate {
	return su.SetTypeID(t.ID)
}

// AddRelationIDs adds the "relations" edge to the Relation entity by IDs.
func (su *SubjectUpdate) AddRelationIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddRelationIDs(ids...)
	return su
}

// AddRelations adds the "relations" edges to the Relation entity.
func (su *SubjectUpdate) AddRelations(r ...*Relation) *SubjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRelationIDs(ids...)
}

// AddAsDirectOwnerTupleIDs adds the "as_direct_owner_tuples" edge to the Tuple entity by IDs.
func (su *SubjectUpdate) AddAsDirectOwnerTupleIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddAsDirectOwnerTupleIDs(ids...)
	return su
}

// AddAsDirectOwnerTuples adds the "as_direct_owner_tuples" edges to the Tuple entity.
func (su *SubjectUpdate) AddAsDirectOwnerTuples(t ...*Tuple) *SubjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddAsDirectOwnerTupleIDs(ids...)
}

// AddAsResourceTupleIDs adds the "as_resource_tuples" edge to the Tuple entity by IDs.
func (su *SubjectUpdate) AddAsResourceTupleIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddAsResourceTupleIDs(ids...)
	return su
}

// AddAsResourceTuples adds the "as_resource_tuples" edges to the Tuple entity.
func (su *SubjectUpdate) AddAsResourceTuples(t ...*Tuple) *SubjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddAsResourceTupleIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearType clears the "type" edge to the TypeConfig entity.
func (su *SubjectUpdate) ClearType() *SubjectUpdate {
	su.mutation.ClearType()
	return su
}

// ClearRelations clears all "relations" edges to the Relation entity.
func (su *SubjectUpdate) ClearRelations() *SubjectUpdate {
	su.mutation.ClearRelations()
	return su
}

// RemoveRelationIDs removes the "relations" edge to Relation entities by IDs.
func (su *SubjectUpdate) RemoveRelationIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveRelationIDs(ids...)
	return su
}

// RemoveRelations removes "relations" edges to Relation entities.
func (su *SubjectUpdate) RemoveRelations(r ...*Relation) *SubjectUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRelationIDs(ids...)
}

// ClearAsDirectOwnerTuples clears all "as_direct_owner_tuples" edges to the Tuple entity.
func (su *SubjectUpdate) ClearAsDirectOwnerTuples() *SubjectUpdate {
	su.mutation.ClearAsDirectOwnerTuples()
	return su
}

// RemoveAsDirectOwnerTupleIDs removes the "as_direct_owner_tuples" edge to Tuple entities by IDs.
func (su *SubjectUpdate) RemoveAsDirectOwnerTupleIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveAsDirectOwnerTupleIDs(ids...)
	return su
}

// RemoveAsDirectOwnerTuples removes "as_direct_owner_tuples" edges to Tuple entities.
func (su *SubjectUpdate) RemoveAsDirectOwnerTuples(t ...*Tuple) *SubjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveAsDirectOwnerTupleIDs(ids...)
}

// ClearAsResourceTuples clears all "as_resource_tuples" edges to the Tuple entity.
func (su *SubjectUpdate) ClearAsResourceTuples() *SubjectUpdate {
	su.mutation.ClearAsResourceTuples()
	return su
}

// RemoveAsResourceTupleIDs removes the "as_resource_tuples" edge to Tuple entities by IDs.
func (su *SubjectUpdate) RemoveAsResourceTupleIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveAsResourceTupleIDs(ids...)
	return su
}

// RemoveAsResourceTuples removes "as_resource_tuples" edges to Tuple entities.
func (su *SubjectUpdate) RemoveAsResourceTuples(t ...*Tuple) *SubjectUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveAsResourceTupleIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldName,
		})
	}
	if su.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.TypeTable,
			Columns: []string{subject.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.TypeTable,
			Columns: []string{subject.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRelationsIDs(); len(nodes) > 0 && !su.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AsDirectOwnerTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAsDirectOwnerTuplesIDs(); len(nodes) > 0 && !su.mutation.AsDirectOwnerTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AsDirectOwnerTuplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AsResourceTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAsResourceTuplesIDs(); len(nodes) > 0 && !su.mutation.AsResourceTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AsResourceTuplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetTypeID sets the "type" edge to the TypeConfig entity by ID.
func (suo *SubjectUpdateOne) SetTypeID(id int) *SubjectUpdateOne {
	suo.mutation.SetTypeID(id)
	return suo
}

// SetNillableTypeID sets the "type" edge to the TypeConfig entity by ID if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableTypeID(id *int) *SubjectUpdateOne {
	if id != nil {
		suo = suo.SetTypeID(*id)
	}
	return suo
}

// SetType sets the "type" edge to the TypeConfig entity.
func (suo *SubjectUpdateOne) SetType(t *TypeConfig) *SubjectUpdateOne {
	return suo.SetTypeID(t.ID)
}

// AddRelationIDs adds the "relations" edge to the Relation entity by IDs.
func (suo *SubjectUpdateOne) AddRelationIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddRelationIDs(ids...)
	return suo
}

// AddRelations adds the "relations" edges to the Relation entity.
func (suo *SubjectUpdateOne) AddRelations(r ...*Relation) *SubjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRelationIDs(ids...)
}

// AddAsDirectOwnerTupleIDs adds the "as_direct_owner_tuples" edge to the Tuple entity by IDs.
func (suo *SubjectUpdateOne) AddAsDirectOwnerTupleIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddAsDirectOwnerTupleIDs(ids...)
	return suo
}

// AddAsDirectOwnerTuples adds the "as_direct_owner_tuples" edges to the Tuple entity.
func (suo *SubjectUpdateOne) AddAsDirectOwnerTuples(t ...*Tuple) *SubjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddAsDirectOwnerTupleIDs(ids...)
}

// AddAsResourceTupleIDs adds the "as_resource_tuples" edge to the Tuple entity by IDs.
func (suo *SubjectUpdateOne) AddAsResourceTupleIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddAsResourceTupleIDs(ids...)
	return suo
}

// AddAsResourceTuples adds the "as_resource_tuples" edges to the Tuple entity.
func (suo *SubjectUpdateOne) AddAsResourceTuples(t ...*Tuple) *SubjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddAsResourceTupleIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearType clears the "type" edge to the TypeConfig entity.
func (suo *SubjectUpdateOne) ClearType() *SubjectUpdateOne {
	suo.mutation.ClearType()
	return suo
}

// ClearRelations clears all "relations" edges to the Relation entity.
func (suo *SubjectUpdateOne) ClearRelations() *SubjectUpdateOne {
	suo.mutation.ClearRelations()
	return suo
}

// RemoveRelationIDs removes the "relations" edge to Relation entities by IDs.
func (suo *SubjectUpdateOne) RemoveRelationIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveRelationIDs(ids...)
	return suo
}

// RemoveRelations removes "relations" edges to Relation entities.
func (suo *SubjectUpdateOne) RemoveRelations(r ...*Relation) *SubjectUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRelationIDs(ids...)
}

// ClearAsDirectOwnerTuples clears all "as_direct_owner_tuples" edges to the Tuple entity.
func (suo *SubjectUpdateOne) ClearAsDirectOwnerTuples() *SubjectUpdateOne {
	suo.mutation.ClearAsDirectOwnerTuples()
	return suo
}

// RemoveAsDirectOwnerTupleIDs removes the "as_direct_owner_tuples" edge to Tuple entities by IDs.
func (suo *SubjectUpdateOne) RemoveAsDirectOwnerTupleIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveAsDirectOwnerTupleIDs(ids...)
	return suo
}

// RemoveAsDirectOwnerTuples removes "as_direct_owner_tuples" edges to Tuple entities.
func (suo *SubjectUpdateOne) RemoveAsDirectOwnerTuples(t ...*Tuple) *SubjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveAsDirectOwnerTupleIDs(ids...)
}

// ClearAsResourceTuples clears all "as_resource_tuples" edges to the Tuple entity.
func (suo *SubjectUpdateOne) ClearAsResourceTuples() *SubjectUpdateOne {
	suo.mutation.ClearAsResourceTuples()
	return suo
}

// RemoveAsResourceTupleIDs removes the "as_resource_tuples" edge to Tuple entities by IDs.
func (suo *SubjectUpdateOne) RemoveAsResourceTupleIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveAsResourceTupleIDs(ids...)
	return suo
}

// RemoveAsResourceTuples removes "as_resource_tuples" edges to Tuple entities.
func (suo *SubjectUpdateOne) RemoveAsResourceTuples(t ...*Tuple) *SubjectUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveAsResourceTupleIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	var (
		err  error
		node *Subject
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldName,
		})
	}
	if suo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.TypeTable,
			Columns: []string{subject.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeconfig.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.TypeTable,
			Columns: []string{subject.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: typeconfig.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRelationsIDs(); len(nodes) > 0 && !suo.mutation.RelationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RelationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.RelationsTable,
			Columns: subject.RelationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: relation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AsDirectOwnerTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAsDirectOwnerTuplesIDs(); len(nodes) > 0 && !suo.mutation.AsDirectOwnerTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AsDirectOwnerTuplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsDirectOwnerTuplesTable,
			Columns: []string{subject.AsDirectOwnerTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AsResourceTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAsResourceTuplesIDs(); len(nodes) > 0 && !suo.mutation.AsResourceTuplesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AsResourceTuplesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subject.AsResourceTuplesTable,
			Columns: []string{subject.AsResourceTuplesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tuple.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
