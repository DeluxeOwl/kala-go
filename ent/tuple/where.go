// Code generated by entc, DO NOT EDIT.

package tuple

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/DeluxeOwl/kala-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SubjectRel applies equality check predicate on the "subject_rel" field. It's identical to SubjectRelEQ.
func SubjectRel(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectRel), v))
	})
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectID), v))
	})
}

// RelationID applies equality check predicate on the "relation_id" field. It's identical to RelationIDEQ.
func RelationID(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelationID), v))
	})
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceID), v))
	})
}

// SubjectRelEQ applies the EQ predicate on the "subject_rel" field.
func SubjectRelEQ(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelNEQ applies the NEQ predicate on the "subject_rel" field.
func SubjectRelNEQ(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelIn applies the In predicate on the "subject_rel" field.
func SubjectRelIn(vs ...string) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectRel), v...))
	})
}

// SubjectRelNotIn applies the NotIn predicate on the "subject_rel" field.
func SubjectRelNotIn(vs ...string) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectRel), v...))
	})
}

// SubjectRelGT applies the GT predicate on the "subject_rel" field.
func SubjectRelGT(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelGTE applies the GTE predicate on the "subject_rel" field.
func SubjectRelGTE(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelLT applies the LT predicate on the "subject_rel" field.
func SubjectRelLT(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelLTE applies the LTE predicate on the "subject_rel" field.
func SubjectRelLTE(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelContains applies the Contains predicate on the "subject_rel" field.
func SubjectRelContains(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelHasPrefix applies the HasPrefix predicate on the "subject_rel" field.
func SubjectRelHasPrefix(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelHasSuffix applies the HasSuffix predicate on the "subject_rel" field.
func SubjectRelHasSuffix(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelIsNil applies the IsNil predicate on the "subject_rel" field.
func SubjectRelIsNil() predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSubjectRel)))
	})
}

// SubjectRelNotNil applies the NotNil predicate on the "subject_rel" field.
func SubjectRelNotNil() predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSubjectRel)))
	})
}

// SubjectRelEqualFold applies the EqualFold predicate on the "subject_rel" field.
func SubjectRelEqualFold(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubjectRel), v))
	})
}

// SubjectRelContainsFold applies the ContainsFold predicate on the "subject_rel" field.
func SubjectRelContainsFold(v string) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubjectRel), v))
	})
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectID), v))
	})
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectID), v))
	})
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectID), v...))
	})
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectID), v...))
	})
}

// RelationIDEQ applies the EQ predicate on the "relation_id" field.
func RelationIDEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRelationID), v))
	})
}

// RelationIDNEQ applies the NEQ predicate on the "relation_id" field.
func RelationIDNEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRelationID), v))
	})
}

// RelationIDIn applies the In predicate on the "relation_id" field.
func RelationIDIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRelationID), v...))
	})
}

// RelationIDNotIn applies the NotIn predicate on the "relation_id" field.
func RelationIDNotIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRelationID), v...))
	})
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResourceID), v))
	})
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v int) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResourceID), v))
	})
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResourceID), v...))
	})
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...int) predicate.Tuple {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Tuple(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResourceID), v...))
	})
}

// HasSubject applies the HasEdge predicate on the "subject" edge.
func HasSubject() predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelation applies the HasEdge predicate on the "relation" edge.
func HasRelation() predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelationTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RelationTable, RelationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelationWith applies the HasEdge predicate on the "relation" edge with a given conditions (other predicates).
func HasRelationWith(preds ...predicate.Relation) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RelationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RelationTable, RelationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasResource applies the HasEdge predicate on the "resource" edge.
func HasResource() predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResourceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasResourceWith applies the HasEdge predicate on the "resource" edge with a given conditions (other predicates).
func HasResourceWith(preds ...predicate.Subject) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ResourceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ResourceTable, ResourceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tuple) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tuple) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tuple) predicate.Tuple {
	return predicate.Tuple(func(s *sql.Selector) {
		p(s.Not())
	})
}
